const fs = require('fs-extra');
const path = require('path');
const pdfParse = require('pdf-parse');

async function testPDF() {
  try {
    console.log('üîç Probando extracci√≥n del PDF...');
    
    const pdfPath = path.join(__dirname, 'public', 'C√≥digoProcesalCivilYComercialDeLaProvinciaDelChaco.pdf');
    console.log('üìÅ Ruta del PDF:', pdfPath);
    
    const dataBuffer = await fs.readFile(pdfPath);
    console.log('üìä Tama√±o del buffer:', dataBuffer.length, 'bytes');
    
    const data = await pdfParse(dataBuffer);
    console.log('üìÑ Informaci√≥n del PDF:');
    console.log('- P√°ginas:', data.numpages);
    console.log('- Tama√±o del texto:', data.text.length, 'caracteres');
    console.log('- Versi√≥n:', data.version);
    
    console.log('\nüìù Primeros 500 caracteres del texto:');
    console.log('---');
    console.log(data.text.substring(0, 500));
    console.log('---');
    
    // Buscar patrones espec√≠ficos
    const patterns = [
      /ART√çCULO/gi,
      /art√≠culo/gi,
      /CAP√çTULO/gi,
      /cap√≠tulo/gi,
      /SECCI√ìN/gi,
      /secci√≥n/gi
    ];
    
    console.log('\nüîç Buscando patrones:');
    patterns.forEach(pattern => {
      const matches = data.text.match(pattern);
      console.log(`${pattern.source}: ${matches ? matches.length : 0} coincidencias`);
    });
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    console.error('Stack:', error.stack);
  }
}

testPDF();
